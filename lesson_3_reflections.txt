git remote
shows one remote called 'origin' already so I can't do 
git remote add origin https://github.com/charleyramm/reflections.git

This isn't mentioned in the course video at 
https://www.udacity.com/course/viewer#!/c-ud775/l-3105028581/e-3073678893/m-3073678894

Oh - I was in the asteroids directory.
...
git push origin master

* When would you want to use a remote repository rather than keeping all your work local?

A remote repository might be good for sharing work with others, working collaboratively, or pushing to a live server.

git pull origin master

* Why might you want to always pull changes manually rather than having 
Git automatically stay up-to-date with your remote repository?

- I might be working on the branch and not ready to merge somebody elses changes.
- I'm a rough tough rough ridin cowboy.
- I want my code to stand still while I edit it, yeahaw!

* Describe the differences between forks, clones, and branches. When 
would you use one instead of another?

- A fork is githubs method of cloning repositories and crediting the 
original author. It is sometimes a convenient way of quickly sharing 
changes to a codebase without requiring authorisation to change the 
original.

- clone is Gits way of creating a copy of an entire repo including its 
commit history. It also sets up a remote called origin automatically. 
When I am going to work independently on a codebase I will clone it to 
my own machine. Later my changes can be pushed or pulled back to the 
'origin' repository. If my changes are out of sync I can pull the latest 
version and merge them locally before pushing to origin.

- Branches are labels for commits. When you checkout a branch it becomes 
the HEAD commit and new commits will have it as a parent. Branches are 
good for separating different coding efforts. I might keep my 
experiments in separate branches so that I can freely change the code 
without fear of breaking the master branch.

* How would you collaborate without using Git or GitHub? What would be 
easier, and what would be harder?

- I could maintain local versions and manually merge changes. I could use
diff to send changes against a known version. I could simply email my 
updated files to somebody. ... simply

- Git has a steep learning curve, and I have only just gotten to know it 
well enough to realise that it can make a fundamental difference to the 
way I code and solve problems. I don't know of another technology that 
does the same thing as well as git does it, perhaps Mercurial?

- I once used CVS and SVN but I never really used them to manage a project
as the learning curve was too steep and non obvious. I wasn't aware of the 
possible benefits. 

- Linus's involvement in Git was inspiring and his presentations at Google
etc. convinced me that I needed to try it out in a serious way.


